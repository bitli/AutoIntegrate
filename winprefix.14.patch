--- ../../AutoIntegrate_1_00-beta.js	2021-08-25 20:10:41.000000000 -0700
+++ ../../AutoIntegrate_1_00-beta_prefix.js	2021-08-31 09:03:11.000000000 -0700
@@ -498,89 +498,92 @@
       END : 5
 };
 
+// var win_prefix = "Jambalaya_";
+var win_prefix = "";
+
 // known window names
 var integration_LRGB_windows = [
-      "Integration_L",
-      "Integration_R",
-      "Integration_G",
-      "Integration_B",
-      "Integration_H",
-      "Integration_S",
-      "Integration_O"
+      win_prefix + "Integration_L",
+      win_prefix + "Integration_R",
+      win_prefix + "Integration_G",
+      win_prefix + "Integration_B",
+      win_prefix + "Integration_H",
+      win_prefix + "Integration_S",
+      win_prefix + "Integration_O"
 ];
 
 var integration_color_windows = [
-      "Integration_RGB"
+      win_prefix + "Integration_RGB"
 ];
 
 var fixed_windows = [
-      "Mapping_L",
-      "Mapping_R",
-      "Mapping_G",
-      "Mapping_B",
-      "Integration_L_ABE",
-      "Integration_R_ABE",
-      "Integration_G_ABE",
-      "Integration_B_ABE",
-      "Integration_RGB_ABE",
-      "Integration_RGB_ABE_NB",
-      "Integration_L_ABE_HT",
-      "Integration_RGB_ABE_HT",
-      "copy_Integration_RGB_ABE_HT",
-      "Integration_RGB_ABE_NB_HT",
-      "copy_Integration_RGB_ABE_NB_HT",
-      "Integration_LRGB_ABE_HT",
-      "copy_Integration_LRGB_ABE_HT",
-      "Integration_L_noABE",
-      "Integration_R_noABE",
-      "Integration_G_noABE",
-      "Integration_B_noABE",
-      "Integration_RGB_noABE",
-      "Integration_RGB_noABE_NB",
-      "Integration_L_noABE_HT",
-      "Integration_L_noABE_NB",
-      "Integration_L_noABE_NB_HT",
-      "Integration_RGB_noABE_HT",
-      "copy_Integration_RGB_noABE_HT",
-      "Integration_RGB_noABE_NB_HT",
-      "Integration_LRGB_noABE_HT",
-      "copy_Integration_LRGB_noABE_HT",
-      "Integration_LRGB_noABE_NB_HT",
-      "copy_Integration_LRGB_noABE_NB_HT",
-      "L_BE_HT",
-      "RGB_BE_HT",
-      "AutoMask",
-      "AutoStarMask",
-      "AutoStarFixMask",
-      "SubframeSelector",
-      "Measurements",
-      "Expressions",
-      "L_win_mask"
+      win_prefix + "Mapping_L",
+      win_prefix + "Mapping_R",
+      win_prefix + "Mapping_G",
+      win_prefix + "Mapping_B",
+      win_prefix + "Integration_L_ABE",
+      win_prefix + "Integration_R_ABE",
+      win_prefix + "Integration_G_ABE",
+      win_prefix + "Integration_B_ABE",
+      win_prefix + "Integration_RGB_ABE",
+      win_prefix + "Integration_RGB_ABE_NB",
+      win_prefix + "Integration_L_ABE_HT",
+      win_prefix + "Integration_RGB_ABE_HT",
+      win_prefix + "copy_Integration_RGB_ABE_HT",
+      win_prefix + "Integration_RGB_ABE_NB_HT",
+      win_prefix + "copy_Integration_RGB_ABE_NB_HT",
+      win_prefix + "Integration_LRGB_ABE_HT",
+      win_prefix + "copy_Integration_LRGB_ABE_HT",
+      win_prefix + "Integration_L_noABE",
+      win_prefix + "Integration_R_noABE",
+      win_prefix + "Integration_G_noABE",
+      win_prefix + "Integration_B_noABE",
+      win_prefix + "Integration_RGB_noABE",
+      win_prefix + "Integration_RGB_noABE_NB",
+      win_prefix + "Integration_L_noABE_HT",
+      win_prefix + "Integration_L_noABE_NB",
+      win_prefix + "Integration_L_noABE_NB_HT",
+      win_prefix + "Integration_RGB_noABE_HT",
+      win_prefix + "copy_Integration_RGB_noABE_HT",
+      win_prefix + "Integration_RGB_noABE_NB_HT",
+      win_prefix + "Integration_LRGB_noABE_HT",
+      win_prefix + "copy_Integration_LRGB_noABE_HT",
+      win_prefix + "Integration_LRGB_noABE_NB_HT",
+      win_prefix + "copy_Integration_LRGB_noABE_NB_HT",
+      win_prefix + "L_BE_HT",
+      win_prefix + "RGB_BE_HT",
+      win_prefix + "AutoMask",
+      win_prefix + "AutoStarMask",
+      win_prefix + "AutoStarFixMask",
+      win_prefix + "SubframeSelector",
+      win_prefix + "Measurements",
+      win_prefix + "Expressions",
+      win_prefix + "L_win_mask"
 ];
 
 var calibrate_windows = [
-      "AutoMasterBias",
-      "AutoMasterSuperBias",
-      "AutoMasterFlatDark",
-      "AutoMasterDark",
-      "AutoMasterFlat_L",
-      "AutoMasterFlat_R",
-      "AutoMasterFlat_G",
-      "AutoMasterFlat_B",
-      "AutoMasterFlat_H",
-      "AutoMasterFlat_S",
-      "AutoMasterFlat_O",
-      "AutoMasterFlat_C"
+      win_prefix + "AutoMasterBias",
+      win_prefix + "AutoMasterSuperBias",
+      win_prefix + "AutoMasterFlatDark",
+      win_prefix + "AutoMasterDark",
+      win_prefix + "AutoMasterFlat_L",
+      win_prefix + "AutoMasterFlat_R",
+      win_prefix + "AutoMasterFlat_G",
+      win_prefix + "AutoMasterFlat_B",
+      win_prefix + "AutoMasterFlat_H",
+      win_prefix + "AutoMasterFlat_S",
+      win_prefix + "AutoMasterFlat_O",
+      win_prefix + "AutoMasterFlat_C"
 ];
 
 /* Final processed window names, depending on input data and options used.
  * These may have Drizzle prefix if that option ise used.
  */
 var final_windows = [
-      "AutoLRGB",
-      "AutoRRGB",
-      "AutoRGB",
-      "AutoMono"
+      win_prefix + "AutoLRGB",
+      win_prefix + "AutoRRGB",
+      win_prefix + "AutoRGB",
+      win_prefix + "AutoMono"
 ];
 
 var narrowBandPalettes = [
@@ -1554,7 +1557,7 @@
 
       var targetWindow = ImageWindow.activeWindow;
 
-      windowRenameKeepif(targetWindow.mainView.id, "AutoMasterSuperBias", true);
+      windowRenameKeepif(targetWindow.mainView.id, win_prefix + "AutoMasterSuperBias", true);
 
       return targetWindow.mainView.id
 }
@@ -1997,7 +2000,7 @@
             addProcessingStep("calibrateEngine generate master bias using " + biasFileNames.length + " files");
             // integrate bias images
             var biasimages = filesForImageIntegration(biasFileNames);
-            var masterbiasid = runImageIntegrationBiasDarks(biasimages, "AutoMasterBias");
+            var masterbiasid = runImageIntegrationBiasDarks(biasimages, win_prefix + "AutoMasterBias");
 
             // save master bias
             setImagetypKeyword(findWindow(masterbiasid), "Master bias");
@@ -2022,7 +2025,7 @@
             addProcessingStep("calibrateEngine generate master flat dark using " + flatdarkFileNames.length + " files");
             // integrate flat dark images
             var flatdarkimages = filesForImageIntegration(flatdarkFileNames);
-            var masterflatdarkid = runImageIntegrationBiasDarks(flatdarkimages, "AutoMasterFlatDark");
+            var masterflatdarkid = runImageIntegrationBiasDarks(flatdarkimages, win_prefix + "AutoMasterFlatDark");
             setImagetypKeyword(findWindow(masterflatdarkid), "Master flat dark");
             var masterflatdarkPath = saveMasterWindow(outputRootDir, masterflatdarkid);
       } else {
@@ -2043,7 +2046,7 @@
                   var darkimages = filesForImageIntegration(darkFileNames);
             }
             // generate master dark file
-            var masterdarkid = runImageIntegrationBiasDarks(darkimages, "AutoMasterDark");
+            var masterdarkid = runImageIntegrationBiasDarks(darkimages, win_prefix + "AutoMasterDark");
             setImagetypKeyword(findWindow(masterdarkid), "Master dark");
             var masterdarkPath = saveMasterWindow(outputRootDir, masterdarkid);
       } else {
@@ -2071,7 +2074,7 @@
                   // integrate flats to generate master flat for each filter
                   var flatimages = filesForImageIntegration(flatcalFileNames);
                   console.writeln("flatimages[0] " + flatimages[0][1]);
-                  masterflatid = runImageIntegrationFlats(flatimages, "AutoMasterFlat_" + filterName);
+                  masterflatid = runImageIntegrationFlats(flatimages, win_prefix + "AutoMasterFlat_" + filterName);
                   console.writeln("masterflatid " + masterflatid);
                   setImagetypKeyword(findWindow(masterflatid), "Master flat");
                   setFilterKeyword(findWindow(masterflatid), filterFiles[0].filter);
@@ -3763,13 +3766,13 @@
       }
       console.writeln("mapCustomAndReplaceImageNames " + targetChannel + " using " + mapping);
       /* Replace letters with actual image identifiers. */
-      mapping = replaceMappingImageNames(mapping, "L", "Integration_O", images);
-      mapping = replaceMappingImageNames(mapping, "R", "Integration_R", images);
-      mapping = replaceMappingImageNames(mapping, "G", "Integration_G", images);
-      mapping = replaceMappingImageNames(mapping, "B", "Integration_B", images);
-      mapping = replaceMappingImageNames(mapping, "H", "Integration_H", images);
-      mapping = replaceMappingImageNames(mapping, "S", "Integration_S", images);
-      mapping = replaceMappingImageNames(mapping, "O", "Integration_O", images);
+      mapping = replaceMappingImageNames(mapping, "L", win_prefix + "Integration_O", images);
+      mapping = replaceMappingImageNames(mapping, "R", win_prefix + "Integration_R", images);
+      mapping = replaceMappingImageNames(mapping, "G", win_prefix + "Integration_G", images);
+      mapping = replaceMappingImageNames(mapping, "B", win_prefix + "Integration_B", images);
+      mapping = replaceMappingImageNames(mapping, "H", win_prefix + "Integration_H", images);
+      mapping = replaceMappingImageNames(mapping, "S", win_prefix + "Integration_S", images);
+      mapping = replaceMappingImageNames(mapping, "O", win_prefix + "Integration_O", images);
       console.writeln("mapCustomAndReplaceImageNames:converted mapping " + mapping);
 
       return mapping;
@@ -3841,13 +3844,13 @@
       addProcessingStep("Run PixelMath mapping R " + mapping_R + ", G " + mapping_G + ", B " + mapping_B);
 
       if (idWin == null) {
-            idWin = findWindow("Integration_H");
+            idWin = findWindow(win_prefix + "Integration_H");
       }
       if (idWin == null) {
-            findWindow("Integration_S");
+            findWindow(win_prefix + "Integration_S");
       }
       if (idWin == null) {
-            findWindow("Integration_O");
+            findWindow(win_prefix + "Integration_O");
       }
       if (idWin == null) {
             console.writeln("ERROR: No reference window found for PixelMath");
@@ -3935,16 +3938,16 @@
       var refimage;
       console.writeln("findLinearFitHSOMapRefimage");
       if (suggestion == "Auto") {
-            refimage = "Integration_O_map";
+            refimage = win_prefix + "Integration_O_map";
             if (arrayFindImage(images, refimage)) {
                   return(refimage);
             }
-            refimage = "Integration_S_map";
+            refimage = win_prefix + "Integration_S_map";
             if (arrayFindImage(images, refimage)) {
                   return(refimage);
             }
       } else {
-            refimage = "Integration_" + suggestion + "_map";
+            refimage = win_prefix + "Integration_" + suggestion + "_map";
             if (arrayFindImage(images, refimage)) {
                   return(refimage);
             }
@@ -4093,7 +4096,7 @@
 
             /* Run PixelMath to create a combined RGB image.
              */
-            RGB_win_id = runPixelMathRGBMapping("Integration_RGB", null, red_mapping, green_mapping, blue_mapping);
+            RGB_win_id = runPixelMathRGBMapping(win_prefix + "Integration_RGB", null, red_mapping, green_mapping, blue_mapping);
 
             RGB_win = findWindow(RGB_win_id);
             RGB_win.show();
@@ -4109,12 +4112,12 @@
             if (is_luminance_images) {
                   var L_images = [];
                   var luminance_mapping = mapCustomAndReplaceImageNames('L', L_images);
-                  luminance_id = mapRGBchannel(L_images, "Integration_L", luminance_mapping);
+                  luminance_id = mapRGBchannel(L_images, win_prefix + "Integration_L", luminance_mapping);
             }
 
-            red_id = mapRGBchannel(R_images, "Integration_R", red_mapping);
-            green_id = mapRGBchannel(G_images, "Integration_G", green_mapping);
-            blue_id = mapRGBchannel(B_images, "Integration_B", blue_mapping);
+            red_id = mapRGBchannel(R_images, win_prefix + "Integration_R", red_mapping);
+            green_id = mapRGBchannel(G_images, win_prefix + "Integration_G", green_mapping);
+            blue_id = mapRGBchannel(B_images, win_prefix + "Integration_B", blue_mapping);
             
             RBGmapping.combined = false;
             RBGmapping.stretched = false;
@@ -4383,7 +4386,7 @@
 
       windowCloseif(P.weightImageId);
 
-      var new_name = windowRename(P.integrationImageId, "Integration_" + name);
+      var new_name = windowRename(P.integrationImageId, win_prefix + "Integration_" + name);
       //addScriptWindow(new_name);
       return new_name;
 }
@@ -4580,7 +4583,7 @@
             windowCloseif(P.integrationImageId);
             return runDrizzleIntegration(images, name);
       } else {
-            var new_name = windowRename(P.integrationImageId, "Integration_" + name);
+            var new_name = windowRename(P.integrationImageId, win_prefix + "Integration_" + name);
             //addScriptWindow(new_name);
             return new_name
       }
@@ -4672,7 +4675,7 @@
             windowCloseif(P.integrationImageId);
             return runDrizzleIntegration(images, name);
       } else {
-            var new_name = windowRename(P.integrationImageId, "Integration_" + name);
+            var new_name = windowRename(P.integrationImageId, win_prefix + "Integration_" + name);
             //addScriptWindow(new_name);
             return new_name;
       }
@@ -5661,14 +5664,14 @@
 
 function findProcessedImages()
 {
-      L_id = findWindowId("Integration_L");
-      R_id = findWindowId("Integration_R");
-      G_id = findWindowId("Integration_G");
-      B_id = findWindowId("Integration_B");
-      H_id = findWindowId("Integration_H");
-      S_id = findWindowId("Integration_S");
-      O_id = findWindowId("Integration_O");
-      color_id = findWindowId("Integration_RGB");
+      L_id = findWindowId(win_prefix + "Integration_L");
+      R_id = findWindowId(win_prefix + "Integration_R");
+      G_id = findWindowId(win_prefix + "Integration_G");
+      B_id = findWindowId(win_prefix + "Integration_B");
+      H_id = findWindowId(win_prefix + "Integration_H");
+      S_id = findWindowId(win_prefix + "Integration_S");
+      O_id = findWindowId(win_prefix + "Integration_O");
+      color_id = findWindowId(win_prefix + "Integration_RGB");
 }
 
 function fileNamesFromOutputData(outputFileData)
@@ -5736,18 +5739,18 @@
       final_win = null;
 
       /* Check if we have manually done histogram transformation. */
-      L_HT_win = findWindow("L_HT");
-      RGB_HT_win = findWindow("RGB_HT");
+      L_HT_win = findWindow(win_prefix + "L_HT");
+      RGB_HT_win = findWindow(win_prefix + "RGB_HT");
 
       /* Check if we have manual background extracted files. */
-      L_BE_win = findWindow("Integration_L_BE");
-      R_BE_win = findWindow("Integration_R_BE");
-      G_BE_win = findWindow("Integration_G_BE");
-      B_BE_win = findWindow("Integration_B_BE");
-      H_BE_win = findWindow("Integration_H_BE");
-      S_BE_win = findWindow("Integration_S_BE");
-      O_BE_win = findWindow("Integration_O_BE");
-      RGB_BE_win = findWindow("Integration_RGB_BE");
+      L_BE_win = findWindow(win_prefix + "Integration_L_BE");
+      R_BE_win = findWindow(win_prefix + "Integration_R_BE");
+      G_BE_win = findWindow(win_prefix + "Integration_G_BE");
+      B_BE_win = findWindow(win_prefix + "Integration_B_BE");
+      H_BE_win = findWindow(win_prefix + "Integration_H_BE");
+      S_BE_win = findWindow(win_prefix + "Integration_S_BE");
+      O_BE_win = findWindow(win_prefix + "Integration_O_BE");
+      RGB_BE_win = findWindow(win_prefix + "Integration_RGB_BE");
 
       findProcessedImages();
 
@@ -6015,7 +6018,7 @@
             if (preprocessed_images == start_images.L_RGB_HT) {
                   /* We have run HistogramTransformation. */
                   addProcessingStep("Using image " + L_HT_win.mainView.id + " for a mask");
-                  L_win = copyWindow(L_HT_win, "L_win_mask");
+                  L_win = copyWindow(L_HT_win, win_prefix + "L_win_mask");
             } else {
                   if (preprocessed_images == start_images.L_RGB_BE ||
                       preprocessed_images == start_images.L_R_G_B_BE) 
@@ -6027,16 +6030,16 @@
                         L_win = ImageWindow.windowById(luminance_id);
                         addProcessingStep("Using image " + luminance_id + " for a mask");
                   }
-                  L_win = copyWindow(L_win, "L_win_mask");
+                  L_win = copyWindow(L_win, win_prefix + "L_win_mask");
 
                   /* Run HistogramTransform based on autostretch because mask should be non-linear. */
                   runHistogramTransform(L_win, null, false, 'mask');
             }
             /* Create mask.
              */
-            mask_win_id = "AutoMask";
+            mask_win_id = win_prefix + "AutoMask";
             mask_win = newMaskWindow(L_win, mask_win_id);
-            windowCloseif("L_win_mask")
+            windowCloseif(win_prefix + "L_win_mask")
       }
 }
 
@@ -6064,7 +6067,7 @@
 
             /* Create mask.
              */
-            mask_win_id = "AutoMask";
+            mask_win_id = win_prefix + "AutoMask";
             mask_win = newMaskWindow(color_win, mask_win_id);
             windowCloseif("color_win_mask")
       }
@@ -6239,7 +6242,7 @@
                         32,                                 // int bitsPerSample=32
                         true,                               // bool floatSample=true
                         true,                               // bool color=false
-                        "Integration_RGB");                 // const IsoString &id=IsoString()
+                        win_prefix + "Integration_RGB");                 // const IsoString &id=IsoString()
 
       RGB_win.mainView.beginProcess(UndoFlag_NoSwapFile);
       cc.executeOn(RGB_win.mainView);
@@ -6404,7 +6407,7 @@
       doRGBNBmapping(test_win.mainView.id);
       
       addProcessingStep("Processing completed");
-      writeProcessingSteps(null, true, "AutoRGBNB");
+      writeProcessingSteps(null, true, win_prefix + "AutoRGBNB");
 
       console.endLog();
 }
@@ -6549,10 +6552,10 @@
 function createStarFixMask(imgView)
 {
       if (star_fix_mask_win == null) {
-            star_fix_mask_win = findWindow("star_fix_mask");
+            star_fix_mask_win = findWindow(win_prefix + "star_fix_mask");
       }
       if (star_fix_mask_win == null) {
-            star_fix_mask_win = findWindow("AutoStarFixMask");
+            star_fix_mask_win = findWindow(win_prefix + "AutoStarFixMask");
       }
       if (star_fix_mask_win != null) {
             // Use already created start mask
@@ -6585,7 +6588,7 @@
 
       star_fix_mask_win = ImageWindow.activeWindow;
 
-      windowRenameKeepif(star_fix_mask_win.mainView.id, "AutoStarFixMask", true);
+      windowRenameKeepif(star_fix_mask_win.mainView.id, win_prefix + "AutoStarFixMask", true);
       star_fix_mask_win_id = star_fix_mask_win.mainView.id;
 
       addProcessingStep("Created star fix mask " + star_fix_mask_win.mainView.id);
@@ -6838,10 +6841,10 @@
 function createStarMask(imgView)
 {
       if (star_mask_win == null) {
-            star_mask_win = findWindow("star_mask");
+            star_mask_win = findWindow(win_prefix + "star_mask");
       }
       if (star_mask_win == null) {
-            star_mask_win = findWindow("AutoStarMask");
+            star_mask_win = findWindow(win_prefix + "AutoStarMask");
       }
       if (star_mask_win != null) {
             // Use already created start mask
@@ -7100,9 +7103,9 @@
                         addProcessingStep("Narrowband palette batch could not process all palettes");
                   }
                   // rename and save the final image
-                  narrowbandPaletteBatchFinalImage(narrowBandPalettes[i].name, "AutoRGB", false);
-                  if (findWindow("AutoRGB_extra") != null) {
-                        narrowbandPaletteBatchFinalImage(narrowBandPalettes[i].name, "AutoRGB_extra", true);
+                  narrowbandPaletteBatchFinalImage(narrowBandPalettes[i].name, win_prefix + "AutoRGB", false);
+                  if (findWindow(win_prefix + "AutoRGB_extra") != null) {
+                        narrowbandPaletteBatchFinalImage(narrowBandPalettes[i].name, win_prefix + "AutoRGB_extra", true);
                   }
                   // next runs are always auto_continue
                   console.writeln("AutoIntegrateNarrowbandPaletteBatch:set auto_continue = true");
@@ -7153,13 +7156,13 @@
             // If we need to create a mask di it after we
             // have removed the stars
             if (mask_win == null) {
-                  mask_win = findWindow("range_mask");
+                  mask_win = findWindow(win_prefix + "range_mask");
             }
             if (mask_win == null) {
-                  mask_win = findWindow("AutoMask");
+                  mask_win = findWindow(win_prefix + "AutoMask");
             }
             if (mask_win == null) {
-                  mask_win_id = "AutoMask";
+                  mask_win_id = win_prefix + "AutoMask";
                   mask_win = newMaskWindow(extraWin, mask_win_id);
             }
             console.writeln("Use mask " + mask_win.mainView.id);
@@ -7343,7 +7346,7 @@
 
             if (par.monochrome_image.val) {
                   console.writeln("par.monochrome_image.val:rename windows")
-                  LRGB_ABE_HT_id = windowRename(L_ABE_HT_win.mainView.id, "AutoMono");
+                  LRGB_ABE_HT_id = windowRename(L_ABE_HT_win.mainView.id, win_prefix + "AutoMono");
 
             } else if (!par.channelcombination_only.val) {
 
@@ -7391,13 +7394,13 @@
                   if (!is_color_files && is_luminance_images) {
                         /* LRGB files */
                         if (par.RRGB_image.val) {
-                              LRGB_ABE_HT_id = windowRename(LRGB_ABE_HT_id, "AutoRRGB");
+                              LRGB_ABE_HT_id = windowRename(LRGB_ABE_HT_id, win_prefix + "AutoRRGB");
                         } else {
-                              LRGB_ABE_HT_id = windowRename(LRGB_ABE_HT_id, "AutoLRGB");
+                              LRGB_ABE_HT_id = windowRename(LRGB_ABE_HT_id, win_prefix + "AutoLRGB");
                         }
                   } else {
                         /* Color or narrowband or RGB files */
-                        LRGB_ABE_HT_id = windowRename(LRGB_ABE_HT_id, "AutoRGB");
+                        LRGB_ABE_HT_id = windowRename(LRGB_ABE_HT_id, win_prefix + "AutoRGB");
                   }
             }
       }
@@ -7908,6 +7911,32 @@
       return outputdir_Sizer;
 }
 
+function addWinPrefix(parent)
+{
+      var lbl = new Label( parent );
+      lbl.text = "Window Prefix";
+      lbl.textAlignment = TextAlign_Left|TextAlign_VertCenter;
+      lbl.toolTip = "<p>Give window prefix</p>";
+      var edt = new Edit( parent );
+      edt.text = win_prefix;
+      edt.toolTip = lbl.toolTip;
+      edt.onEditCompleted = function() {
+	  win_prefix = edt.text.trim();
+	  if (win_prefix != "") {
+	      win_prefix = win_prefix + "_";
+	  }
+            console.writeln("addWinPrefix, set winPrefix", win_prefix);
+      };
+
+      var winprefix_Sizer = new HorizontalSizer;
+      winprefix_Sizer.spacing = 4;
+      winprefix_Sizer.add( lbl );
+      winprefix_Sizer.add( edt );
+
+      return winprefix_Sizer;
+}
+
+
 function addFilesToFileList(pageIndex, imageFileNames)
 {
       var allFileNames = null;
@@ -8078,8 +8107,10 @@
             updateInfoLabel();
       };
 
+      var winprefix_sizer = addWinPrefix(parent);
       var outputdir_sizer = addOutputDir(parent);
 
+
       var filesButtons_Sizer = new HorizontalSizer;
       filesButtons_Sizer.spacing = 4;
       filesButtons_Sizer.add( addLightsButton );
@@ -8089,6 +8120,7 @@
       filesButtons_Sizer.add( addFlatDarksButton );
       filesButtons_Sizer.add( filesClear_Button );
       filesButtons_Sizer.addStretch();
+      filesButtons_Sizer.add( winprefix_sizer );
       filesButtons_Sizer.add( outputdir_sizer );
       return filesButtons_Sizer;
 }
@@ -9351,7 +9383,7 @@
             catch(err) {
                   console.criticalln(err);
                   console.criticalln("Processing stopped!");
-                  writeProcessingSteps(null, true, "AutoRGBNB");
+                  writeProcessingSteps(null, true, win_prefix + "AutoRGBNB");
                   console.endLog();
             }
             par.use_RGBNB_Mapping.val = false;
